package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"errors"

	"github.com/Sergey-Polishchenko/go-post-flow/internal/delivery/graph/dataloaders"
	"github.com/Sergey-Polishchenko/go-post-flow/internal/delivery/graph/generated"
	"github.com/Sergey-Polishchenko/go-post-flow/internal/delivery/graph/model"
	flowerrors "github.com/Sergey-Polishchenko/go-post-flow/pkg/errors"
	"github.com/Sergey-Polishchenko/go-post-flow/internal/utils"
)

// Children is the resolver for the children field.
func (r *commentResolver) Children(ctx context.Context, obj *model.Comment, limit *int, offset *int) ([]*model.Comment, error) {
	childrenIDs, err := r.storage.GetChildrenIDs(obj.ID)
	if err != nil && !errors.Is(err, flowerrors.ErrCommentChildrenNotFound) {
		return nil, err
	}

	loader, ok := ctx.Value(dataloaders.CommentLoaderKey).(*dataloaders.CommentLoader)
	if !ok {
		return nil, flowerrors.ErrCommentLoaderNotFound
	}

	children, errs := loader.LoadAll(ctx, childrenIDs)
	for _, err := range errs {
		if err != nil {
			if errors.Is(err, flowerrors.ErrCommentChildrenNotFound) {
				return []*model.Comment{}, nil
			}
			return nil, err
		}
	}

	paginated := utils.ApplyPagination(children, limit, offset)

	return paginated, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, limit *int, offset *int) ([]*model.Comment, error) {
	commentsIDs, err := r.storage.GetCommentsIDs(obj.ID)
	if err != nil && !errors.Is(err, flowerrors.ErrCommentsNotFound) {
		return nil, err
	}

	loader, ok := ctx.Value(dataloaders.CommentLoaderKey).(*dataloaders.CommentLoader)
	if !ok {
		return nil, flowerrors.ErrCommentLoaderNotFound
	}

	comments, errs := loader.LoadAll(ctx, commentsIDs)
	for _, err := range errs {
		if err != nil {
			if errors.Is(err, flowerrors.ErrCommentChildrenNotFound) {
				return []*model.Comment{}, nil
			}
			return nil, err
		}
	}

	paginated := utils.ApplyPagination(comments, limit, offset)

	return paginated, nil
}

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

// Post returns generated.PostResolver implementation.
func (r *Resolver) Post() generated.PostResolver { return &postResolver{r} }

type commentResolver struct{ *Resolver }
type postResolver struct{ *Resolver }

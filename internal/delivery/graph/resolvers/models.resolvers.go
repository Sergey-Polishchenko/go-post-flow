package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"errors"

	"github.com/Sergey-Polishchenko/go-post-flow/internal/delivery/graph/generated"
	"github.com/Sergey-Polishchenko/go-post-flow/internal/delivery/graph/model"
	reperrors "github.com/Sergey-Polishchenko/go-post-flow/internal/repository/errors"
	"github.com/Sergey-Polishchenko/go-post-flow/internal/utils"
)

// Children is the resolver for the children field.
func (r *commentResolver) Children(ctx context.Context, obj *model.Comment, limit *int, offset *int, depth *int, expand *bool) ([]*model.Comment, error) {
	children, err := r.storage.GetChildren(obj.ID)
	if err != nil {
		if errors.Is(err, reperrors.ErrCommentChildrenNotFound) {
			return []*model.Comment{}, nil
		}
		return nil, err
	}

	paginated := utils.ApplyPagination(children, limit, offset)

	if expand != nil && *expand {
		return utils.ProcessCommentsWithDepth(
			paginated,
			depth,
			r.storage.GetChildren,
			*expand,
		)
	}

	return paginated, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, limit *int, offset *int, depth *int, expand *bool) ([]*model.Comment, error) {
	comments, err := r.storage.GetComments(obj.ID)
	if err != nil {
		if errors.Is(err, reperrors.ErrCommentNotFound) {
			return []*model.Comment{}, nil
		}
		return nil, err
	}

	paginated := utils.ApplyPagination(comments, limit, offset)

	if expand != nil && *expand {
		return utils.ProcessCommentsWithDepth(
			paginated,
			depth,
			r.storage.GetChildren,
			*expand,
		)
	}

	return paginated, nil
}

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

// Post returns generated.PostResolver implementation.
func (r *Resolver) Post() generated.PostResolver { return &postResolver{r} }

type (
	commentResolver struct{ *Resolver }
	postResolver    struct{ *Resolver }
)

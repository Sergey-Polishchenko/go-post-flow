package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"

	"github.com/Sergey-Polishchenko/go-post-flow/internal/transport/graph/dataloaders"
	"github.com/Sergey-Polishchenko/go-post-flow/internal/transport/graph/generated"
	"github.com/Sergey-Polishchenko/go-post-flow/internal/transport/graph/model"
	flowerrors "github.com/Sergey-Polishchenko/go-post-flow/pkg/errors"
)

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	loader, ok := ctx.Value(dataloaders.PostLoaderKey).(*dataloaders.PostLoader)
	if !ok {
		return nil, flowerrors.ErrPostLoaderNotFound
	}
	return loader.Load(ctx, id)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit *int, offset *int) ([]*model.Post, error) {
	posts, err := r.storage.GetPosts(limit, offset)
	if err != nil {
		return nil, err
	}
	return posts, nil
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	loader, ok := ctx.Value(dataloaders.CommentLoaderKey).(*dataloaders.CommentLoader)
	if !ok {
		return nil, flowerrors.ErrPostLoaderNotFound
	}
	return loader.Load(ctx, id)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	loader, ok := ctx.Value(dataloaders.UserLoaderKey).(*dataloaders.UserLoader)
	if !ok {
		return nil, flowerrors.ErrPostLoaderNotFound
	}
	return loader.Load(ctx, id)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
